{"version":3,"sources":["pages/chat/useChat.tsx","pages/chat/components/Message.tsx","pages/chat/ChatPage.tsx","components/form/TextField.tsx","pages/home/HomePage.tsx","pages/login/LoginPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DOMAIN_URL","window","location","hostname","NEW_MESSAGE_EVENT","useChat","roomId","_useState","useState","_useState2","_slicedToArray","messages","setMessages","socketRef","useRef","useEffect","current","io","query","on","socket","console","log","err","message","incomingMessage","_objectSpread","ownedByCurrentUser","senderId","id","oldMessages","concat","_toConsumableArray","disconnect","sendMessage","username","emit","body","date","Date","Message","props","lastMessage","anchorRef","scrollIntoView","_jsxs","ref","className","children","_jsx","format","ChatPage","useLocation","setUsername","useParams","_useChat","state","Link","to","ArrowLeftOutlined","color","map","i","length","Formik","initialValues","onSubmit","values","_ref","resetForm","Form","Field","name","placeholder","Button","type","shape","size","icon","SendOutlined","TextField","label","value","formikBag","rest","_objectWithoutProperties","_excluded","handleChange","errors","Input","onChange","validationSchema","Yup","roomID","required","HomePage","history","useHistory","push","goToRoom","LoginPage","localStorage","setItem","handleSubmit","App","Router","Switch","Redirect","exact","path","Route","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15fe04ff.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { io } from 'socket.io-client';\n\nconst DOMAIN_URL = window.location.hostname + ':4000'\nconst NEW_MESSAGE_EVENT = \"newChatMessage\"\n\nconst useChat = (roomId: string) => {\n\n    const [messages, setMessages]: any = useState([])\n    // const socket = io(DOMAIN_URL, {transports: [\"websocket\", \"xhr-polling\", \"htmlfile\", \"jsonp-polling\"]})\n    const socketRef: any = useRef();\n    \n    useEffect(() => {\n        socketRef.current = io(DOMAIN_URL, {\n            query: {roomId}\n        })\n\n        socketRef.current.on(\"connection\", (socket:any) => {\n            console.log(socket)\n        })\n\n        socketRef.current.on(\"connect_error\", (err: any) => {\n            console.log(err)\n        })\n\n        socketRef.current.on('connect_timeout', function(err: any) {\n            console.log(\"client connect_timeout: \", err);\n        });\n\n        socketRef.current.on(NEW_MESSAGE_EVENT, (message:any) => {\n            const incomingMessage = {\n                ...message,\n                ownedByCurrentUser: message.senderId == socketRef.current.id\n            }\n            setMessages((oldMessages: any) => [...oldMessages, incomingMessage]);\n        })\n        // socketRef.on(\"connection\", (socket: any) => {\n        //     console.log(socket)\n        // })\n\n\n        // socketRef.current.on(NEW_MESSAGE_EVENT, (data: any) => {\n        //     console.log(data)\n        // })\n        return () => {\n            socketRef.current.disconnect();\n        }\n    }, [roomId])\n\n    const sendMessage = (message: string, username:string) => {\n        socketRef.current.emit(NEW_MESSAGE_EVENT, {\n            body: message,\n            username,\n            senderId: socketRef.current.id,\n            date: new Date()\n        })\n    }\n\n    return {messages, sendMessage};\n}\n\nexport default useChat","import React, { useEffect, useRef } from 'react'\nimport {format} from 'date-fns'\nimport \"./Message.css\";\n\nexport default function Message(props: any) {\n    const { message, lastMessage} = props;\n    const {body, date, username, ownedByCurrentUser} = message;\n    const anchorRef: any = useRef();\n\n    useEffect(() => {\n        if (lastMessage){\n            anchorRef.current.scrollIntoView()\n        }\n    }, [])\n    \n    return (\n        <div ref={anchorRef} className=\"message\">\n            <div className=\"profile\">{username}</div>\n            <div className={`message-box ${ownedByCurrentUser && 'owner'}`}>\n                <div>\n                    <div>{body}</div>\n                </div>\n                <div className=\"message-box-timestamp\">{format(new Date(date), \"HH:mmaaa\")}</div>\n            </div>\n        </div>\n    )\n}\n","import { Button } from 'antd';\nimport { Field, Form, Formik } from 'formik';\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Link, useLocation, useParams } from 'react-router-dom'\nimport \"./ChatPage.css\"\nimport {ArrowLeftOutlined, BackwardOutlined, SendOutlined} from '@ant-design/icons';\nimport useChat from './useChat';\nimport Message from './components/Message';\n\nexport default function ChatPage() {\n    const location: any = useLocation();\n    const [username, setUsername] = useState(\"\")\n\n    const {id: roomId}: any = useParams();\n    const {messages, sendMessage} = useChat(roomId)\n    \n\n    useEffect(() => {\n        // if (location.state){\n        //     setUsername(location.state.username)\n        // }\n        setUsername(location.state && location.state.username ? location.state.username : \"Anonymous\")\n        // setUsername(localStorage.getItem(\"username\") || \"Anonymous\")\n\n    }, [])\n\n    \n\n    const handleSubmit = (values: any, {resetForm}: any) => {\n        console.log(values)\n        sendMessage(values.message, username)\n        resetForm()\n    }\n\n    return (\n        <div className=\"chat-page\">\n            <div className=\"chat-window\">\n                <div className=\"chat-window-header\">\n                    <Link to=\"/home\" className=\"chat-window-back-link\">\n                    <ArrowLeftOutlined color=\"white\" />\n                    </Link>\n                    <div className=\"chat-window-title\">{roomId}</div>\n                    <div></div>\n                </div>\n                \n                <div className=\"chat-box-container\">\n                <div className=\"chat-box\">\n                    <div className=\"messages-list\">\n                        {messages.map((message: any, i: number) => {\n                            // console.log(messages)\n                            // console.log(message);\n                            const lastMessage = i == messages.length - 1\n                            return (\n                                <Message \n                                    key={i}\n                                    message={message} \n                                    lastMessage={lastMessage}/>\n                            )\n                        })}\n                    </div>\n                </div>\n                </div>\n                <div className=\"typing-area-container\">\n                <Formik\n                    initialValues={{message: \"\"}}\n                    onSubmit={handleSubmit}>\n                    <Form className=\"typing-area\">\n                        <Field className=\"type-box\" name=\"message\" placeholder=\"Type something...\"/>\n                        <Button className=\"send-btn\" type=\"primary\" shape=\"circle\" size=\"large\" icon={<SendOutlined/>}></Button>\n                    </Form>\n                </Formik>\n                </div>\n                \n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport {FormFieldProps} from './formProps'\nimport {Input} from 'antd'\n\ninterface P extends FormFieldProps {\n    [x:string]:any\n}\n\nexport default function TextField(props: P) {\n    const {name, label, value, formikBag, ...rest} = props\n    const {values, handleChange, errors} = formikBag\n    return (\n        <div className=\"input\">\n            {label ? <label>{label}</label> : null}\n            <Input\n                name={name}\n                value={value ? value : values[name]}\n                onChange={handleChange}\n                {...rest}/>\n            {errors[name] && \n                <div className=\"err-msg\">{errors[name]}</div>\n            }\n        </div>\n    )\n}","import { Button, Input, notification } from 'antd'\nimport { Formik, Form } from 'formik'\nimport React from 'react'\nimport { useHistory } from 'react-router-dom';\nimport \"./HomePage.css\"\nimport * as Yup from 'yup'\nimport TextField from '../../components/form/TextField';\n\nconst validationSchema = Yup.object().shape({\n    roomID: Yup.string().required(\"Room ID is required\"),\n    username: Yup.string()\n})\n\nexport default function HomePage() {\n\n    const history: any = useHistory();\n    const goToRoom = (values: any) => {\n        const {username, roomID} = values;\n        // localStorage.setItem(\"username\", username)\n        history.push(`/chat/${values.roomID}`, {username})\n    }\n    return (\n        <div className=\"home-page\">\n            <div>\n            <h1 className=\"home-page-title\">Join a Chatroom</h1>\n            <Formik\n                initialValues={{username: \"\", roomID: \"\"}}\n                validationSchema={validationSchema}\n                onSubmit={(values: any) => goToRoom(values)}>\n                    {(formikBag: any) => {\n                        return (\n                            <Form className=\"form\">\n                                <TextField size=\"large\" name=\"roomID\" placeholder=\"Room Name\" formikBag={formikBag}/>\n                                <TextField size=\"large\" name=\"username\" placeholder=\"Username\" formikBag={formikBag}/>\n                                <button className=\"join-room-btn\" type=\"submit\">Join Room</button>\n                            </Form>\n                        )\n                    }}\n            </Formik>\n            </div>\n        </div>\n    )\n}\n","import { Field, Form, Formik } from 'formik'\nimport React from 'react'\nimport { useHistory } from 'react-router-dom';\n\nexport default function LoginPage() {\n\n    const history = useHistory();\n\n    const handleSubmit = (values: any) => {\n        console.log(values);\n        const {username} = values\n        localStorage.setItem(\"username\", username);\n        history.push(\"/chat\", values)\n    }\n\n    return (\n        <div>\n            <Formik\n                initialValues={{username: \"\"}}\n                onSubmit={(values: any) => handleSubmit(values)}>\n                <Form>\n                    <Field name={\"username\"} placeholder=\"wackyhorse99\"/>\n                    <button type=\"submit\">Submit</button>\n                </Form>\n            </Formik>\n\n        </div>\n    )\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport ChatPage from './pages/chat/ChatPage';\nimport HomePage from './pages/home/HomePage';\nimport LoginPage from './pages/login/LoginPage';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Redirect exact path=\"/\" to={\"/home\"}/>\n        <Route path=\"/login\" component={LoginPage}/>\n        <Route path=\"/home\" component={HomePage}/>\n        <Route path=\"/chat/:id\" component={ChatPage}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css'\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}